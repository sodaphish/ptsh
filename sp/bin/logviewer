#!/usr/bin/env python
import sys, os, getopt, os.path
from sp.base import Version 

ver=Version(0,2,6)

try:
	from clint.textui import colored
except:
	print "You need to run `pip install clint`!!"
	sys.exit()


def usage():
	print "logviewer %s -- color log viewer" % (ver)
	print "  usage: logviewer -[adiwecsz] [logfile]"
	print "    -a  show all entries"
	print "    -d  show only debug entries"
	print "    -i  show only info entries"
	print "    -w  show only warning entries"
	print "    -e  show only error entries"
	print "    -c  show only critical entries"
	print "    -s  show only sql log entries"
	print "    -z  zero the log file"
	return


try:
	opts,args=getopt.getopt(sys.argv[1:],"adiwecsz")
except getopt.GetoptException as err:
	usage()
	sys.exit(2)
if len(args)<1:
	usage()
	sys.exit(2)
elif not os.path.isfile( args[0] ):
	usage()
	sys.exit(2)


# by default we aren't going to show ANY level
debug=False
info=False
warn=False
error=False
critical=False
sql=False
zero=False

for o,a in opts:
	if o=="-d":
		debug=True
	elif o=="-i":
		info=True
	elif o=="-w":
		warn=True
	elif o=="-e":
		error=True
	elif o=="-c":
		critical=True
	elif o=="-s":
		sql=True
	elif o=="-a":
		debug=True
		info=True
		warn=True
		error=True
		critical=True
		sql=True
	elif o=="-z":
		zero=True


print "logviewer %s -- color log viewer" % (ver)


if __name__ == '__main__':

	if zero:
		#we're nuking the log file
		try:
			fh = open( args[0], 'w' )
			print "...log erased."
			fh.close()
		except:
			print "E: couldn't erase log %s" % (args[0])
			sys.exit(2)
	else:
		#process the log file
		try:
			fh = open( args[0], 'r' )
		except: 
			print "E: couldn't open %s" % ( args[0] )
			sys.exit(2)
	
		linecount = 1
		for l in fh:
			line = "%04d:  " % (linecount) + l.strip()
			if ( ( "SQL--" in line ) or ( "VAR--" in line ) ) and debug:
				print colored.magenta(line)
			elif "DEBUG" in line and debug:
				print colored.cyan(line)
			elif "INFO" in line and info:
				print colored.green(line)
			elif "WARN" in line and warn:
				print colored.yellow(line)
			elif "ERROR" in line and error:
				print colored.red(line)
			elif "CRITICAL" in line and critical:
				print colored.red(line)
			linecount=linecount+1
		fh.close()

''' ___EOF___ '''
